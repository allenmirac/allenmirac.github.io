<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>c内存模型编译过程gcc命令</title>
      <link href="/2023/06/20/c-nei-cun-mo-xing-bian-yi-guo-cheng-gcc-ming-ling/"/>
      <url>/2023/06/20/c-nei-cun-mo-xing-bian-yi-guo-cheng-gcc-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="c-内存模型"><a href="#c-内存模型" class="headerlink" title="c++内存模型"></a>c++内存模型</h2><p>1、源代码区：存储代码的区域（类似jvm里的方法区） 2、静态区：存储<strong>静态</strong>变量和<strong>全局变量</strong>的区域（类似jvm里的方法区里的方法区） 3、栈区：存储<strong>局部变量</strong>和<strong>参数</strong>的内存区域，<strong>由系统开辟、由系统回收的内存区域</strong> 4、堆区：<strong>程序员开辟</strong>的一块内存区域用来存储对象的区域，由<strong>用户开辟和回收</strong>的内存区域。 5、常量区(字面值区)：存储const常量 指针变量能指向那些区域： 栈区、堆区、静态区、常量区、代码区</p><p><img src="/.io//aacad79859a442289a42a7b8467a614b.png" alt="aacad79859a442289a42a7b8467a614b.png"></p><p>堆区和栈区的注意点：</p><p>1、栈是向下增长，而堆是向上增长。</p><p>2、栈由系统管理，没有内存碎片，每个元素之间都是连续的；堆区存储的是程序员new出来的变量，是动态开辟的。</p><h2 id="c-编译过程"><a href="#c-编译过程" class="headerlink" title="c++编译过程"></a>c++编译过程</h2><ul><li><strong>编译预处理</strong>+ <strong>编译、优化阶段</strong>+ <strong>汇编</strong>+ <strong>链接</strong></li></ul><p><strong>链接过程</strong></p><p>主要是解决在一个文件中引用了另外的一个文件中变量或函数的问题，它将有关的目标文件彼此相连接，使得所有的这些目标文件成为一个能够被操作系统装入执行的统一整体。</p><p>在《编译原理》中我们可以了解到一个编译器对程序代码的编译主要分为下面几个过程：a) 词法分析 b) 语法分析 c) 语义分析 d) 中间代码生成 e) 代码优化 f) 目标代码生成 g) 符号表管理 h) 将多个步骤组合成趟 i) 编译器构造工具</p><h2 id="GCC编译过程"><a href="#GCC编译过程" class="headerlink" title="GCC编译过程"></a>GCC编译过程</h2><p><img src="/.io//83d6486e62afc8830623c71b51a32dc1.png" alt="83d6486e62afc8830623c71b51a32dc1.png"></p><p>在Linux下使用的gcc编译器将上面几个过程捆绑在一起，简化我们的使用，但是我们依然可以通过指定不同的参数，来分别执行各个过程：<br>命令（-o后面都是自己指定的文件名字）工作内容gcc -E hello.c -o hello.i预处理gcc -S hello.c -o hello.s编译gcc hello.s -o hello.o汇编gcc hello.o -o hello链接</p><p>1.cpp的内容</p><p><img src="/.io//37e54de88a0442949d95bfd5983d6a6c.png" alt="37e54de88a0442949d95bfd5983d6a6c.png"></p><p>执行预处理命令后： （文件名是1.cpp）</p><p><img src="/.io//a54b46b64e934fc7ab827dff5d873618.png" alt="a54b46b64e934fc7ab827dff5d873618.png"></p><p>一步编译运行： </p><p><img src="/.io//72c6d674b3784babb0f0d7fdc3e8fcaf.png" alt="72c6d674b3784babb0f0d7fdc3e8fcaf.png"></p><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p><a href="https://paul.pub/cpp-memory-model/">C++ 内存模型</a></p><p><a href="https://www3.ntu.edu.sg/home/ehchua/programming/cpp/gcc_make.html">GCC and Make - A Tutorial on how to compile, link and build C&#x2F;C++ applications</a></p><p><a href="https://blog.csdn.net/Hongwei_1990/article/details/84558733">C&#x2F;C++ 编译流程（预处理、编译、汇编、链接）_deepwater_zone的博客-CSDN博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>inline关键字</title>
      <link href="/2023/06/19/inline-guan-jian-zi/"/>
      <url>/2023/06/19/inline-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<h2 id="inline关键字"><a href="#inline关键字" class="headerlink" title="inline关键字"></a>inline关键字</h2><p>在函数声明和定义加上，使之称为内联函数。如果一些简单的函数直接在类中声明并且定义，编译器可以将其优化为内联函数。</p><p>注：内联函数可以减少函数的执行时间：原因是它可以在使用时直接进行替换（像宏一样展开），从而避免出现参数压栈、代码生成等操作，但是如果函数体过大，编译器就不会将其作为内联函数，即使加了关键字inline，同时内联函数不能递归。</p><p>inline关键字声明的函数依旧是函数，所以会有类型检查，可以消除C语言宏的一些缺点。</p><p>关键字inline必须与函数定义放在一起才能使函数成为内联函数，仅仅将inline放在函数声明前面不起任何作用。inline是一种“用于实现”的关键字，而不是一种“用于声明”的关键字。</p><h2 id="慎用-inline"><a href="#慎用-inline" class="headerlink" title="慎用 inline"></a>慎用 inline</h2><p>内联能提高函数的执行效率，为什么不把所有的函数都定义成内联函数？如果所有的函数都是内联函数，还用得着”内联”这个关键字吗？  内联是以<strong>代码膨胀（复制）</strong>为代价，仅仅省去了函数调用的开销，从而提高函数的执行效率。  如果执行函数体内代码的时间，相比于函数调用的开销较大，那么效率的收获会很少。另一方面，每一处内联函数的调用都要复制代码，将使程序的总代码量增大，消耗更多的内存空间，是以空间换时间，这是一种常用的手段，因为时间总是更加宝贵的。</p><p><strong>以下情况不宜使用内联：</strong>  （1）如果函数体内的代码<strong>比较长</strong>，使用内联将导致<strong>内存消耗代价较高</strong>。  （2）如果函数体内出现<strong>循环</strong>，那么执行函数体内代码的时间要比函数调用的开销大。类的构造函数和析构函数容易让人误解成使用内联更有效。要当心<strong>构造函数和析构函数可能会隐藏一些行为</strong>，如”偷偷地”执行了<strong>基类或成员对象</strong>的构造函数和析构函数。所以<strong>不要随便地将构造函数和析构函数的定义体放在类声明中</strong>。一个好的编译器将会根据函数的定义体，自动地取消不值得的内联（这进一步说明了 inline 不应该出现在函数的声明中）。</p><h2 id="使用参考"><a href="#使用参考" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>  </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">  string name;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Person::display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Person person;</span><br><span class="line">  person.name = <span class="string">&quot;Erin&quot;</span>;</span><br><span class="line">  person.<span class="built_in">display</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果将display直接在类内定义，会被自动关联为inline函数</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2023/06/19/test/"/>
      <url>/2023/06/19/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/19/hello-world/"/>
      <url>/2023/06/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
